package qqmusic

import (
	"io/ioutil"
	"log"
	"net/http"
	"strings"

	"github.com/tidwall/gjson"
)

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
var (
	url      = "https://u.y.qq.com/cgi-bin/musicu.fcg?_=1611935576577"
	json_str = "{\"req_0\":{\"module\":\"music.musicMall.MallMusicMallSvr\",\"method\":\"PoollingAlbumSaleInfo\",\"param\":{\"actID\":536,\"albumID\":17206701,\"albumMID\":\"003ooH9p0GjhsS\",\"actList\":\"\",\"ident_list\":1}},\"comm\":{\"g_tk\":5381,\"uin\":0,\"format\":\"json\",\"platform\":\"h5\"}}"
)

func Get_album_count() int {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// var data = strings.NewReader(`{"req_0":{"module":"music.musicMall.MallMusicMallSvr","method":"PoollingAlbumSaleInfo","param":{"actID":536,"albumID":17206701,"albumMID":"003ooH9p0GjhsS","actList":"","ident_list":1}},"comm":{"g_tk":5381,"uin":0,"format":"json","platform":"h5"}}`)
	req, err := http.NewRequest("POST", "https://u.y.qq.com/cgi-bin/musicu.fcg?_=1611929582155", strings.NewReader(json_str))
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("authority", "u.y.qq.com")
	req.Header.Set("pragma", "no-cache")
	req.Header.Set("cache-control", "no-cache")
	req.Header.Set("accept", "application/json")
	req.Header.Set("dnt", "1")
	req.Header.Set("user-agent", "Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1")
	req.Header.Set("content-type", "application/x-www-form-urlencoded")
	req.Header.Set("origin", "https://y.qq.com")
	req.Header.Set("sec-fetch-site", "same-site")
	req.Header.Set("sec-fetch-mode", "cors")
	req.Header.Set("sec-fetch-dest", "empty")
	req.Header.Set("referer", "https://y.qq.com/")
	req.Header.Set("accept-language", "zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6,ja;q=0.5")
	req.Header.Set("cookie", "checkmask=3; pgv_info=ssid=s9286644809; ts_refer=ADTAGcbshare; pgv_pvid=2359575340; ts_uid=6376915200")

	// by, _ := httputil.DumpRequest(req, true)
	// fmt.Println(string(by))

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
		return -1
	}
	defer resp.Body.Close()
	res, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return -1
	}

	count := gjson.GetBytes(res, "req_0.data.saleinfo.album_count")
	return int(count.Int())
}
